{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodingValley","text":"<p>CodingValley is a RESTful web service which allow to:  </p> <ul> <li>search movies/series by given word and year;  </li> <li>retrieve specific movie/series/epicode by IMDb ID;  </li> <li>write reviews to movies and series;  </li> <li>like/dislike for specific review;  </li> <li>write discussions about any topics;  </li> <li>write comments to specific discussions;  </li> <li>sign up user with creating user account and profile;  </li> <li>authenticate user via JWT tokens and Social authentication.  </li> </ul>"},{"location":"#deployment","title":"Deployment","text":"<p>The project is deployed on AWS. It's available for the folowing link: https://codingvalley.tech/ </p>"},{"location":"#test-coverage","title":"Test coverage","text":"<p>The project has a test coverage of more than 80%, which indicates the reliability of the project.  </p>"},{"location":"#more-information","title":"More information","text":"<ol> <li>Quick start </li> <li>Endpoints </li> </ol>"},{"location":"endpoints/","title":"Media","text":"<p>https://codingvalley.tech/watchlists/search/ - GET  </p> <p>Using: Get paginated list of movies or series by title or part of title with  filtering by release year.  </p> <p>Query parameters:  </p> Parameter Required Description search Yes Title or part of title to search for year No Year of release page No Number of page to return(1 by default) <p>https://codingvalley.tech/watchlists/get/ - GET  </p> <p>Using: Get specific movie or series by IMDb ID.  </p> <p>Query parameters:  </p> Parameter Required Description imdb_id Yes IMDb ID of movie of series type Yes Media type(Either movie or series) imdb_rating No Minimum media rating(any rating by default) <p>https://codingvalley.tech/watchlists/get/season/ - GET  </p> <p>Using: Get specific season of the series by series IMDb ID and season number with  filtering by episode imdb_rating.  </p> <p>Query parameters:  </p> Parameter Required Description imdb_id Yes IMDb ID of series season Yes Season number imdb_rating No Minimum episodes rating(any rating by default) <p>https://codingvalley.tech/watchlists/recently_searched/ - GET  </p> <p>Using: Get paginated list of movies or series sorted by receiving time.  </p> <p>Query parameters: No any query parameters are required.  </p>"},{"location":"endpoints/#discussion","title":"Discussion","text":"<p>Description: Discussion objects represent discussions about any topics;  </p> <p>Endpoints:  </p> URL HTTP Method Description https://codingvalley.tech/discussions/ GET get list of discussions https://codingvalley.tech/discussions/ POST create a discussion https://codingvalley.tech/discussions/&lt;id&gt;/ GET retrieve specific discussion https://codingvalley.tech/discussions/&lt;id&gt;/ PUT/PATCH update specific discussion https://codingvalley.tech/discussions/&lt;id&gt;/ DELETE delete specific discussion <p>Permissions: POST - only for authenticated users; PUT/PATCH, DELETE - only for onner and admins.  </p>"},{"location":"endpoints/#comment","title":"Comment","text":"<p>Description: Comment objects represent comments to a specific discussion;  </p> <p>Endpoints:  </p> URL HTTP Method Description https://codingvalley.tech/comments/ POST create a comments https://codingvalley.tech/comments/&lt;id&gt;/ PUT/PATCH update specific comments https://codingvalley.tech/comments/&lt;id&gt;/ DELETE delete specific comments <p>Permissions: POST - only for authenticated users; PUT/PATCH, DELETE - only for onner and admins;  </p> <p>Notes: The list of comments is retrieved for the specific Discussion object.  </p>"},{"location":"endpoints/#review","title":"Review","text":"<p>Description: Review objects represent review to a specific movie or series;  </p> <p>Endpoints:  </p> URL HTTP Method Description https://codingvalley.tech/reviews/ POST create a reviews https://codingvalley.tech/reviews/&lt;id&gt;/ PUT/PATCH update specific reviews https://codingvalley.tech/reviews/&lt;id&gt;/ DELETE delete specific reviews <p>Permissions: POST - only for authenticated users; PUT/PATCH, DELETE - only for onner and admins;  </p> <p>Notes: The list of reviews is retrieved for the specific Media object.  </p>"},{"location":"endpoints/#reviewslike","title":"ReviewsLike","text":"<p>Description: ReviewsLike objects represent a bundle user-review in order to user can not add several likes for the same review;  </p> <p>Endpoints:  </p> URL HTTP Method Description https://codingvalley.tech/reviewlikes/ POST create a reviewlikes https://codingvalley.tech/reviewlikes/&lt;id&gt;/ DELETE delete specific reviewlikes <p>Permissions: POST - only for authenticated users; DELETE - only for onner and admins;  </p>"},{"location":"endpoints/#registration-and-authentication","title":"Registration and authentication","text":"<p>Endpoints:  </p> URL HTTP Method Description https://codingvalley.tech/users/register/ POST create new user and get access and refresh tokens https://codingvalley.tech/users/login/ POST get access and refresh tokens https://codingvalley.tech/users/logout/ POST add given refresh token to blacklist https://codingvalley.tech/users/logout/all/ POST add all the user's refresh tokens to blacklist https://codingvalley.tech/users/login/refresh/ POST get new refresh token, given refresh token is added to blacklist https://codingvalley.tech/users/login/google/ POST get access tokens by given google's token"},{"location":"endpoints/#user-account","title":"User account","text":"<p>Endpoints:  </p> URL HTTP Method Description https://codingvalley.tech/users/account/email/activate/ POST send an email to verify email address of current user https://codingvalley.tech/users/account/activate/&lt;uidb64&gt;/&lt;token&gt; GET vefify email of current user https://codingvalley.tech/users/account/password/reset/ POST send an email to reset password of current user https://codingvalley.tech/users/account/reset/&lt;uidb64&gt;/&lt;token&gt; POST reset password of current user https://codingvalley.tech/users/account/change_password/ PUT/PATCH change password of current user"},{"location":"endpoints/#user-profile","title":"User profile","text":"<p>Endpoints:  </p> URL HTTP Method Description https://codingvalley.tech/users/user/&lt;username&gt;/ GET retrieve profile of user with <code>username</code> username https://codingvalley.tech/users/user/&lt;username&gt;/follow/ POST start of stop following user with <code>username</code> username https://codingvalley.tech/users/&lt;uuid&gt;/save/ POST add media with <code>uuid</code> id to the favorites https://codingvalley.tech/users/profile/edit/ PUT/PATCH update user profile"},{"location":"quick_start/","title":"Quick start","text":"<ul> <li> <p>clone the repository:</p> <p>via HTTPS:  </p> <p><code>git clone https://github.com/igorkaruna/codingvalley.git</code> </p> <p>via SSH:  </p> <p><code>git clone  git@github.com:igorkaruna/codingvalley.git</code> </p> </li> <li> <p>Run the project via docker-compose:  </p> </li> </ul>"},{"location":"quick_start/#development-server","title":"Development server","text":"<p>To run this project via docker-compose using default development server it's  necessary to do the next steps:  </p> <ol> <li> <p>Add the <code>env.dev</code> file to <code>config/.env</code> directory and add the following environ variables:  </p> <pre><code>SECRET_KEY - the secret key of the project;\nDEBUG - debug mode(for development on local machine use '1');\nALLOWED_HOSTS - allowed hosts(for local machine use '127.0.0.1');\nINTERNAL_IPS - internal ips(for local machine use '127.0.0.1');\nDJANGO_SETTINGS_MODULE - reference to setting.py of project(use 'base.settings');\nPYTHONPATH - base dir for imports(use 'app');\nSQL_ENGINE - database engine(for PostgreSQL use 'django.db.backends.postgresql');\nSQL_DATABASE - database name;\nSQL_USER - database user;\nSQL_PASSWORD - database password;\nSQL_HOST - database service name(use 'db');\nSQL_PORT - database port(use '5432');\nDATABASE - name of RDBMS(for PostgreSQL use 'postgres');\nAPI_KEY - api key from OMDb API(it's possible to get from https://www.omdbapi.com/apikey.aspx);\nCORS_ALLOWED_ORIGINS - allowed hosts(for local machine use 'http://127.0.0.1');\nREDIS_HOST - database service name(use 'redis');\nEMAIL_PORT - port for email(for gmail use '587');\nEMAIL_HOST - host for email(for gmail use 'smtp.gmail.com');\nEMAIL_HOST_USER - email address of the account(account for the mailing);\nEMAIL_HOST_PASSWORD - email password of the account.\n</code></pre> </li> <li> <p>Add <code>database-dev</code> file to <code>config/db</code> directory and add the following environ variables:  </p> <pre><code>POSTGRES_DB - database name;\nPOSTGRES_USER - database user;\nPOSTGRES_PASSWORD - database password.\n</code></pre> <p>Pay attention: POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD variables must be the same as SQL_DATABASE, SQL_USER, SQL_PASSWORD respectively. </p> </li> <li> <p>Run docker-compose using the following command:  </p> <pre><code>docker-compose -f docker-compose.dev.yml up\n</code></pre> <p>After that you can run the Django project which works at http://0.0.0.0:8000/.  The <code>app</code> directory is mounted into container so the code changes will be  applied authomatically.  </p> <p>To stop docker-compose use:  </p> <pre><code>docker-compose -f docker-compose.dev.yml down\n</code></pre> </li> </ol>"},{"location":"quick_start/#production-server","title":"Production server","text":"<p>To run this project via docker-compose using gunicorn + nginx it's necessary to do the next steps:  </p> <ol> <li> <p>Add the <code>env.prod</code> file to <code>config/.env</code> directory and add the environ variables which can be  the same as in <code>env.dev</code> file. Not forget to change <code>DEBUG</code> to be 1.  </p> </li> <li> <p>Add <code>database-env.prod</code> file to <code>config/db</code> directory and add the environ variables which must be  the same as in <code>database-dev</code> file.  </p> </li> <li> <p>Run docker-compose using the following command:  </p> <pre><code>docker-compose -f docker-compose.prod.yaml up\n</code></pre> </li> <li> <p>Make migration:  </p> <pre><code>docker-compose -f docker-compose.prod.yaml exec web python blog/manage.py migrate --noinput\n</code></pre> </li> <li> <p>Collect static files:  </p> <pre><code>docker-compose -f docker-compose.prod.yaml exec web python blog/manage.py collectstatic --no-input --clear\n</code></pre> <p>After that you can run the Django project which works at http://0.0.0.0:1337/.  The <code>app</code> directory is not mounted into container so to apply the code change the  image must be rebuilt by using --build option.  </p> <p>To stop docker-compose use:  </p> <pre><code>docker-compose -f docker-compose.prod.yaml down\n</code></pre> </li> </ol>"}]}